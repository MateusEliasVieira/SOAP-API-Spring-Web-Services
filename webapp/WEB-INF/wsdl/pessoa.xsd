<?xml version="1.0" encoding="UTF-8"?>

<!-- <wsdl:definitions> É uma forma de descrever a interface e 
     o contrato do serviço,permitindo a comunicação 
     entre clientes e serviços web. -->
<!-- O targetNamespace é um atributo obrigatório em um documento WSDL 
     e define o namespace alvo para todo o WSDL. Ele especifica o namespace 
     no qual os tipos de dados, operações e mensagens definidos no WSDL estão sendo usados. -->
<!-- O prefixo tns está sendo associado ao namespace "http://localhost/soap". 
     Isso permite que você faça referência a elementos definidos nesse namespace 
     usando o prefixo tns nos outros elementos do seu WSDL. 
     Exemplo: Quando uso tns:PessoaModel, seria o mesmo que http://localhost/soap/PessoaModel
     tns armazena a url do nosso projeto -->
<wsdl:definitions xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:tns="http://localhost/soap"
	xmlns:xs="http://www.w3.org/2001/XMLSchema"
	targetNamespace="http://localhost/soap">

	<!-- Definimos os tipos de dados -->
	<!-- Todos elementos complexType que eu quiser adicionar que representa um contrato(interface), 
	     eu teria que criar e colocar em um arquivo xsd separado e depois importar no arquivo principal.
	     É uma prática comum separar as definições de tipos complexos (contratos ou interfaces) 
	     em arquivos XSD separados e, em seguida, importá-los no arquivo WSDL principal.
		 Essa abordagem ajuda a manter o código organizado, facilita a reutilização de 
		 definições e permite que você tenha arquivos XSD específicos para cada conjunto de tipos complexos.
		 Para importar um arquivo XSD em um documento WSDL, você pode usar o elemento <wsdl:import>, 
		 como mencionado anteriormente. A declaração <wsdl:import> é usada para importar definições de 
		 tipos de outros documentos WSDL ou XSD. Isso permite que você associe o namespace do arquivo 
		 importado ao namespace do documento WSDL principal, tornando as definições disponíveis para 
		 uso no documento WSDL.
		 Portanto, se você tiver vários tipos complexos (contratos) que deseja adicionar, cada um pode 
		 ser definido em seu próprio arquivo XSD e importado no arquivo WSDL principal usando <wsdl:import>.-->
	<wsdl:types>

		<xs:schema>
        	<xs:import namespace="http://localhost/soap" schemaLocation="definicoes.xsd"/>
		</xs:schema>

	</wsdl:types>

	<!-- Em resumo, o <wsdl:message> é usado para definir
		 a estrutura e o
	formato das mensagens trocadas 
		 entre o cliente e o serviço web.  -->
	<wsdl:message name="mensagemPessoaEntrada">
		<wsdl:part name="parametroPessoaEntrada" type="tns:PessoaModel" />
	</wsdl:message>

	<wsdl:message name="mensagemPessoaSaida">
		<wsdl:part name="resultado" type="tns:PessoaModel" />
	</wsdl:message>

<!--
     O <wsdl:portType> pode ser considerado 
	 como uma interface abstrata que define 
	 um conjunto de operações disponíveis em um serviço web.
	 
	 Cada <wsdl:operation> dentro do <wsdl:portType> 
	 pode ser comparado a um método da interface. 
	 Assim como um método em uma classe, cada operação 
	 tem um nome único e pode ter parâmetros de entrada 
	 e um resultado de saída.
	 
	 O <wsdl:input> dentro de uma operação representa 
	 os parâmetros de entrada do método, especificando 
	 as mensagens associadas que contêm os elementos de entrada. 
	 O <wsdl:output> define a mensagem de saída do método, 
	 que pode conter elementos que representam o resultado retornado.
-->
	<wsdl:portType name="PessoaInterface">

		<wsdl:operation name="metodoInserirPessoa">
			<wsdl:input message="tns:mensagemPessoaEntrada" />
			<wsdl:output message="tns:mensagemPessoaSaida" />
		</wsdl:operation>
		
		<!-- Mais métodos... -->

	</wsdl:portType>
	
	<!-- Essa linha cria o elemento <wsdl:binding> com o nome "PessoaBinding" e define o 
    tipo como "tns:PessoaInterface". Isso estabelece a vinculação entre o tipo de porta (portType) e o binding.	-->
	 <wsdl:binding name="PessoaBinding" type="tns:PessoaInterface">
		 
		<!-- Essa linha define o estilo do binding SOAP como "document" 
		e o transporte como HTTP. Isso especifica que as mensagens SOAP 
		serão enviadas em um estilo de documento e usando o protocolo HTTP para transporte.-->
        <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http" />

		<!-- Essa linha cria o elemento <wsdl:operation> com o nome "metodoInserirPessoa". 
			 Isso representa a operação disponível no serviço.-->
        <wsdl:operation name="metodoInserirPessoa">
			
			<!-- Essa linha especifica a ação SOAP associada à operação. 
			     O atributo soapAction define o valor da ação SOAP para 
			     a operação "metodoInserirPessoa". No exemplo, foi usado 
			     o valor "http://example.com/soap-api/metodoInserirPessoa", 
			     mas você pode substituir pelo valor correto para sua aplicação.-->
            <soap:operation soapAction="http://example.com/soap-api/metodoInserirPessoa" />
            
            <!-- Essas linhas definem o formato de mensagem para a entrada da operação. 
                 O elemento <soap:body> indica que o corpo da mensagem SOAP será usado 
				 e o atributo use é definido como "literal", o que significa que os 
				 dados da mensagem serão passados literalmente.-->
            <wsdl:input>
                <soap:body use="literal" />
            </wsdl:input>
            
            <!-- Essas linhas definem o formato de mensagem para a saída da operação. 
                 O elemento <soap:body> indica que o corpo da mensagem SOAP será usado 
				 e o atributo use é definido como "literal".-->
            <wsdl:output>
                <soap:body use="literal" />
            </wsdl:output>
            
        </wsdl:operation>
        
    </wsdl:binding>

    <!-- Essas linhas definem o serviço e a porta correspondentes ao binding. 
         O elemento <wsdl:service> define o serviço com o nome "PessoaService". 
		 O elemento <wsdl:port> define a porta com o nome "PessoaPort" e estabelece 
		 a vinculação (binding) com "tns:PessoaBinding". O elemento <soap:address> -->
    <wsdl:service name="PessoaService">
        <wsdl:port name="PessoaPort" binding="tns:PessoaBinding">
            <soap:address location="http://example.com/soap-api/PessoaService" />
        </wsdl:port>
    </wsdl:service>

</wsdl:definitions>